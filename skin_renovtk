from tkinter import ttk
import tkinter as tk


class SkinRenovTk(tk.Frame):
    def __init__(self, master=None, **kw):
        super().__init__(master, **kw)
        self.master = master
        self.init_ui()

    def init_ui(self):
        fm_top = tk.Frame(self)
        fm_top.grid(row=0, column=0, sticky='wens')
        fm0 = tk.Frame(fm_top)
        fm1 = tk.Frame(fm_top)
        fm0.grid(row=0, column=0, sticky='wens')
        fm1.grid(row=1, column=0, sticky='wens')
        self.columnconfigure(0, weight=1)
        fm_top.columnconfigure(0, weight=1)
        fm0.columnconfigure(2, weight=1)
        fm1.columnconfigure(0, weight=1)

        
        self.bt_info = ttk.Button(
            fm0,
            text='INFO',
            padding=-2,
            takefocus=False,
            width=6,
            command=self.toggle_tabs
        )
        self.bt_rt = ttk.Button(
            fm0,
            text='RT',
            padding=-2,
            takefocus=False,
            width=3
        )
        self.var_template = tk.StringVar()
        self.en_template = ttk.Entry(
            fm0,
            textvariable=self.var_template,
            takefocus=False,
        )
        self.var_tags = tk.StringVar()
        self.en_tags = ttk.Entry(
            fm1,
            textvariable=self.var_tags,
            takefocus=False,
        )
        self.bt_reload = ttk.Button(
            fm1,
            text='RELOAD',
            padding=-2,
            takefocus=False,
            width=8
        )
        self.var_current_tag = tk.StringVar()
        self.cmb_tags = ttk.Combobox(
            fm1,
            textvariable=self.var_current_tag,
            # state='readonly',
            takefocus=False,
            width=16
        )
        self.bt_info.grid(
            row=0, column=0, sticky='wens',
            padx=2, pady=0,
        )
        self.bt_rt.grid(
            row=0, column=1, sticky='wens',
            padx=2, pady=0,
        )
        self.en_template.grid(
            row=0, column=2, sticky='wens',
            padx=2, pady=0,
        )
        self.en_tags.grid(
            row=1, column=0, sticky='wens',
            padx=2, pady=0,
        )
        self.bt_reload.grid(
            row=1, column=1, sticky='wens',
            padx=2, pady=0,
        )
        self.cmb_tags.grid(
            row=1, column=2, sticky='wens',
            padx=2, pady=0,
        )

        self.wg_tabs = ttk.Notebook(self)
        self.wg_tabs.grid(row=1, column=0, sticky='wens')
        self.rowconfigure(1, weight=1)
        self.wg_tabs.columnconfigure(0, weight=1)
        self.wg_tabs.rowconfigure(0, weight=1)

        self.tab1 = tk.Frame(self.wg_tabs)
        self.tab2 = tk.Frame(self.wg_tabs)
        self.wg_tabs.add(self.tab1, text='Tab 1')
        self.wg_tabs.add(self.tab2, text='Tab 2')

        # Ocultar las pestañas
        style = ttk.Style()
        style.layout("TNotebook.Tab", [])
        style.configure("TNotebook", borderwidth=0)

        # TAB 1
        self.tree = ttk.Treeview(self.tab1, columns=('A', 'B', 'C'), show='headings')
        self.tree.grid(row=0, column=0, sticky='wens')
        # self.tab1.rowconfigure(0, weight=1)
        self.tab1.columnconfigure(0, weight=1)
        # TAB 1


        # TAB 2
        self.text_info = tk.Text(self.tab2, wrap='word')
        self.text_info.grid(row=0, column=0, sticky='wens')
        self.tab2.rowconfigure(0, weight=1)
        self.tab2.columnconfigure(0, weight=1)
        # TAB 2


        # self.bt_rename = ttk.Button(
        #     fm_top,
        #     text='RENAME',
        #     padding=-2,
        #     takefocus=False,
        # )
        # self.bt_rename.grid(
        #     row=0, column=0, sticky='wens',
        #     padx=0, pady=0,
        # )

    def toggle_tabs(self):
        # Obtener el índice de la pestaña actual
        current_tab_index = self.wg_tabs.index(self.wg_tabs.select())
        index = 1 if current_tab_index == 0 else 0
        self.wg_tabs.select(index)


if __name__ == "__main__":
    root = tk.Tk()
    root.geometry("500x200")
    root.title("Skin RenovTk Example")
    app = SkinRenovTk(master=root)
    app.pack(fill='both', expand=True)
    root.mainloop()